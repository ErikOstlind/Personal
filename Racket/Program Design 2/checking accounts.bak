;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname |checking accounts|) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
(define-struct account (id name amount))

(define accounts '())

(define (search index)(local [(define (inspectElement k)(cond[(>= k (length accounts))false]
                                                             [(cond[(eq? (account-name(list-ref accounts k)) index)true]
                                                                   [(eq? (account-id(list-ref accounts k)) index)true]
                                                                   [else false])(list-ref accounts k)]
                                                             [else (inspectElement (add1 k))]))]
                        (inspectElement 0)))

(define (createCheckingAccount)
  (local [(define (tasks msg)
            (cond [(eq? msg 'Deposite) deposite]
                  [(eq? msg 'Withdraw) withdraw]
                  [(eq? msg 'Balance) getBalance]
                  [(eq? msg 'Owner) getName]
                  [(eq? msg 'Create) ...]
                  [else (error 'task "~s: Unknown command" msg)]))
          (define (deposite acc depAmount)
            (cond[(> depAmount 0)
                  (cond[(struct? acc)(set! acc (make-account (account-id acc)(account-name acc)(+(account-amount acc)depAmount)))]
                       [else (local [(define a (search acc))]
                               ((cond[(boolean? a)(error 'search "Account with element (~s) was not found" acc)]
                                  [else (set! a (make-account (account-id a)(account-name a)(+(account-amount a)depAmount)))])))])]))
          (define (withdraw acc withAmount)
            (cond[(> withAmount 0)
                  (cond[(identifier? acc)(cond[(>=(account-amount acc)withAmount)(set! acc (make-account (account-id acc)(account-name acc)(+(account-amount acc)depAmount)))]
                                              [else (error "Insufficient funds")])]
                       [else (local [(define a (search acc))]
                               ((cond[(boolean? a)(error 'search "Account with element (~s) was not found" acc)]
                                     [else (cond[(>=(account-amount a)withAmount)(set! a (make-account (account-id a)(account-name a)(+(account-amount a)depAmount)))]
                                                [else (error "Insufficient funds")])])))])]))
          (define (getBalance acc)(cond[(identifier? acc)(account-amount acc)]
                                       [else (local [(define a (search acc))]
                                               ((cond[(boolean? a)(error 'search "Account with element (~s) was not found" acc)]
                                                     [else (account-amount a)])))]))
          (define (getName acc)(cond[(identifier? acc)(account-name acc)]
                                       [else (local [(define a (search acc))]
                                               ((cond[(boolean? a)(error 'search "Account with element (~s) was not found" acc)]
                                                     [else (account-name a)])))]))
          (define (create name)(let ([id (random 1000000 999999)])(set! accounts (cons accounts (make-account id name 0)))))]
  tasks))