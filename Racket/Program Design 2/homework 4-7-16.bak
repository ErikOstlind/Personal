;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname |homework 4-7-16|) (read-case-sensitive #t) (teachpacks ((lib "draw.rkt" "teachpack" "htdp"))) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ((lib "draw.rkt" "teachpack" "htdp")) #f)))
(define-struct author( name age books))
(define-struct book( title price isbn authors))
(define authors '())


(define (addAuthor n d)
  (local[(define newAuthor (make-author n d '()))]
    (begin (set! authors (cons newAuthor authors))
           newAuthor)))

(define (find-author a)
  (local[(define (search i)(cond[(= i (length authors))false]
                                [else (cond[(equal? (author-name (list-ref authors i)) a)(list-ref authors i)]
                                           [else (search (add1 i))])]))]
    (search 0)))

(define (addBook t p i a)
  (local [(define (iterate i)(cond[(= (length a) i)"way to go"]
                                  [else 
                                   (local [(define A (local[(define ex (find-author (list-ref a i)))]
                                                       (cond [(boolean? ex)(addAuthor (list-ref a i) -1)]
                                                             [else ex])))
                                           (define newBook (make-book t p i a))]
                                     (begin (set-author-books! A (cons newBook(author-books A))) (iterate (add1 i))))]))]
                                  (iterate 0)))

(define (findBooksBy name)(author-books (find-author name)))
(define (findAuthorOf title)(local [(define (iterate i)(cond[(= (length authors i))"yes mate"]
                                                            [else
                                                             (local[(define (searchbooks j)(cond[(=(length (author-books (list-ref authors i)))j)"idk"]
                                                                                                     [else (cond[(equal (book-title (list-ref (author-books (list-ref authors i))j))title)(list-ref authors i)]
                                                                                                                [else (searchbooks (add1 j))])

(define erik (addAuthor "erik" 18))
(define dickbutt (addAuthor "dickbutt" 1337))
(begin (addBook "yes" 100 12349871325 (list "erik" "dickbutt")) 0)