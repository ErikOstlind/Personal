/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matricies;

import java.util.HashMap;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author ostlinja
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    Map matricies;
    Map names;
    public MainForm() {
        matricies = new HashMap();
        names = new HashMap();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("New Matrix");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Operations...", "Determinate", "Multiply", "Dot", "Add", "Inverse", "Transpose" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 95, Short.MAX_VALUE))
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int index = jTabbedPane1.getTabCount();
        String name = getAvailableChar(names);
        Matrix temp = new Matrix(2,2);
        jTabbedPane1.add(new MatrixForm(temp,this,index),name);
        jTabbedPane1.setSelectedIndex(index);
        matricies.put(index,temp);
        names.put(index, name);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String cmd = jComboBox1.getSelectedItem().toString();
        if(cmd=="Determinate")
            determinate();
        else if(cmd=="Multiply")
            multiply();
        else if(cmd=="Dot")
            dot();
        else if(cmd=="Add")
            add();
        else if(cmd=="Inverse")
        {

        }
        else if(cmd=="Transpose")
        {

        }
        this.repaint();
        //Operations..., Determinate, Multiply, Dot, Add, Inverse, Transpose
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void determinate()
    {
        JComboBox j = new JComboBox(getNames(names));
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Matrix:"));
        myPanel.add(j);
        int res = JOptionPane.showConfirmDialog(this,myPanel,"Determinate",JOptionPane.OK_CANCEL_OPTION);
        if(res==JOptionPane.OK_OPTION)
        {
            String s = j.getSelectedItem().toString();
            if(s!=null && s!="Select...")
            {
                Matrix temp = (Matrix)matricies.get(j.getSelectedIndex());
                temp.determinate();
            }
        }
    }
    
    private void multiply()
    {
        JComboBox j = new JComboBox(getNames(names));
        JComboBox j2 = new JComboBox(getNames(names));
        JTextField value = new JTextField(5);
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Matrix:"));
        myPanel.add(j);
        myPanel.add(new JLabel("Enter Value:"));
        myPanel.add(value);
        myPanel.add(new JLabel("Or Matrix:"));
        myPanel.add(j2);
        int res = JOptionPane.showConfirmDialog(this,myPanel,"Multiply",JOptionPane.OK_CANCEL_OPTION);
        if(res==JOptionPane.OK_OPTION)
        {
            String s = j.getSelectedItem().toString();
            String s2 = j2.getSelectedItem().toString();
            String v = value.getText();
            if(s!=null)
            {
                Matrix temp = (Matrix)matricies.get(j.getSelectedIndex());
                if(s2=="Select..." && v.matches("^-?\\d+$"))
                    temp.multiply(Integer.parseInt(v));
                else
                    try{temp.multiply((Matrix)matricies.get(j2.getSelectedIndex()));}
                    catch(Exception e){System.out.println(e);}
                
            }
        }
    }
    
    private void dot()
    {
        JComboBox j = new JComboBox(getNames(names));
        JComboBox j2 = new JComboBox(getNames(names));
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Matrix:"));
        myPanel.add(j);
        myPanel.add(new JLabel("Other Matrix:"));
        myPanel.add(j2);
        int res = JOptionPane.showConfirmDialog(this,myPanel,"Dot Product",JOptionPane.OK_CANCEL_OPTION);
        if(res==JOptionPane.OK_OPTION)
        {
            String s = j.getSelectedItem().toString();
            String s2 = j2.getSelectedItem().toString();
            if(s!=null && s2!=null && s!="Select..." && s2!="Select...")
            {
                Matrix temp = (Matrix)matricies.get(j.getSelectedIndex());
                try{temp.multiply((Matrix)matricies.get(j2.getSelectedIndex()));}
                catch(Exception e){System.out.println(e);}
            }
        }
    }
    
    private void add()
    {
        JComboBox j = new JComboBox(getNames(names));
        JComboBox j2 = new JComboBox(getNames(names));
        JTextField value = new JTextField(5);
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Matrix:"));
        myPanel.add(j);
        myPanel.add(new JLabel("Enter Value:"));
        myPanel.add(value);
        myPanel.add(new JLabel("Or Matrix:"));
        myPanel.add(j2);
        int res = JOptionPane.showConfirmDialog(this,myPanel,"Addition",JOptionPane.OK_CANCEL_OPTION);
        if(res==JOptionPane.OK_OPTION)
        {
            String s = j.getSelectedItem().toString();
            String s2 = j2.getSelectedItem().toString();
            String v = value.getText();
            if(s!=null)
            {
                Matrix temp = (Matrix)matricies.get(j.getSelectedIndex());
                if(s2=="Select..." && v.matches("^-?\\d+$"))
                    temp.add(Integer.parseInt(v));
                else
                    try{temp.add((Matrix)matricies.get(j2.getSelectedIndex()));}
                    catch(Exception e){System.out.println(e);}
                
            }
        }
    }
    
    private String getAvailableChar(Map m)
    {
        String res = "";
        for (char b = 'A'; b <= 'Z'; ++b)
        {
            for (char a = 'A'; a <= 'Z'; ++a)
            {
                String temp = res+a;
                if(!m.containsValue(temp))
                    return temp;
            }
            res = b+"";
        }
        return "...";
    }
   
    public String[] getNames(Map<Integer,String> m)
    {
        String[] res = new String[m.size()+1];
        res[0] = "Select...";
        for(Map.Entry<Integer, String> entry : m.entrySet())
        {
            res[entry.getKey()+1] = entry.getValue();
        }
        return res;
    }
    
    public void delete(int i)
    {
        jTabbedPane1.remove(i);
        matricies.remove(i);
        names.remove(i);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
